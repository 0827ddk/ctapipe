import tables
import numpy as np
from ctapipe.core import Container, Item

import logging
log = logging.getLogger(__name__)

NUMPY_TO_PYTABLES_TYPE_MAP = {
    'float64': tables.Float64Col,
    'float32': tables.Float32Col,
    'int' : tables.IntCol,
    'bool': tables.BoolCol,
}



class SimpleHDF5TableWriter:
    """
    A very basic table writer that can take a container (or more than one) 
    and write it to an HDF5 file.
    
    This is a very simplistic implementation that only work on numpy array 
    fields in a `Container`, which must be initialized before the first call to 
    `write()`.
    
    It can write multiple tables at once, as long as you change the 
    table_name attribute to write() to specify which one to write to.
    
    Parameters:
    -----------
    filename: str
        name of hdf5 output file
    group_name: str
        name of group into which to put all of the tables generated by this 
        Writer (it will be placed under "/" in the file)
    """

    def __init__(self, filename, group_name):
        self._schemas = {}
        self._tables = {}
        self._h5file = tables.open_file(filename, mode = "w")
        self._group = self._h5file.create_group("/", group_name)

    def __del__(self):
        self._h5file.close()

    def _create_schema(self, tablename, container):

        class Schema(tables.IsDescription):
            pass

        # create pytables schema description for the given container
        for name, value in container.items():
            if isinstance(value, np.ndarray):
                log.debug("name: {} DTYPE: {}".format(name,value.dtype.name))
                coltype = NUMPY_TO_PYTABLES_TYPE_MAP[value.dtype.name]
                Schema.columns[name] = coltype(shape=value.shape)

        self._schemas[tablename] = Schema

    def _create_table(self, tablename):
        table =  self._h5file.create_table(where=self._group,
                                           name=tablename,
                                           description=self._schemas[tablename])

        self._tables[tablename] = table

    def write(self, tablename, container):
        """
        Write the contents of the given container to a table.  The first call 
        to write  will create a schema and initialize the table within the 
        file. The shape of data within the container must not change between 
        calls, since variable-length arrays are not supported. 
        
        Parameters
        ----------
        tablename: str 
            name of table to write to 
        container: `ctapipe.core.Container` 
            container to write
        """

        if tablename not in self._schemas:
            log.debug("Initializing table '{}'".format(tablename))
            self._create_schema(tablename, container)
            self._create_table(tablename)

        # append a row to the table
        row = self._tables[tablename].row
        for name, value in container.items():
            if isinstance(value, np.ndarray):
                row[name] = value
        row.append()